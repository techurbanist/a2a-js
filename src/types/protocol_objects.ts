/**
 * Type definitions for Protocol Data Objects in the A2A Protocol
 * Based on Section 6 of the A2A Protocol Specification
 */

/**
 * The role of the message sender
 */
export enum Role {
  Agent = "agent",
  User = "user",
}

/**
 * TaskState enum representing the possible lifecycle states of a Task
 */
export enum TaskState {
  Submitted = "submitted",
  Working = "working", 
  InputRequired = "input-required",
  Completed = "completed",
  Canceled = "canceled",
  Failed = "failed",
  Unknown = "unknown"
}

/**
 * Message object representing a single communication turn or contextual information
 */
export interface Message {
  /**
   * Unique identifier for the message
   */
  messageId?: string;
  
  /**
   * Indicates the sender of the message: "user" (from A2A Client) or "agent" (from A2A Server)
   */
  role: Role | string;

  /**
   * Array of content parts. Must contain at least one part.
   */
  parts: Part[];

  /**
   * Task ID the message is associated with (optional)
   */
  taskId?: string;

  /**
   * Whether this message is the final one in a stream (optional)
   */
  final?: boolean;

  /**
   * Arbitrary key-value metadata associated with this message.
   */
  metadata?: Record<string, any> | null;
}

/**
 * Base properties common to all message parts
 */
export interface PartBase {
  /**
   * Optional metadata associated with the part
   */
  metadata?: Record<string, any> | null;
}

/**
 * Text part in a message
 */
export interface TextPart extends PartBase {
  /**
   * Part type - text for TextParts
   */
  type: "text";

  /**
   * Text content
   */
  text: string;
}

/**
 * Data part in a message
 */
export interface DataPart extends PartBase {
  /**
   * Part type - data for DataParts
   */
  type: "data";

  /**
   * Structured data content
   */
  data: Record<string, any>;
}

/**
 * Interface representing file content in messages
 */
export interface FileContent {
  /**
   * Optional name of the file, if known (e.g., "document.pdf", "avatar.png")
   */
  name?: string | null;

  /**
   * Optional MIME type of the file (e.g., "application/pdf", "image/png")
   * Strongly recommended for proper handling
   */
  mimeType?: string | null;

  /**
   * Base64 encoded string of the raw file content.
   * Use this for embedding small to medium-sized files directly.
   */
  bytes?: string | null;

  /**
   * A URI (absolute URL is STRONGLY recommended) pointing to the file content.
   * Accessibility of this URI depends on the context (e.g., public URL, pre-signed URL, internal URL).
   * The client and server must have a way to resolve and access this URI if used.
   */
  uri?: string | null;

  // Constraint: If file content is being transmitted, exactly one of `bytes` or `uri` MUST be non-null.
  // Both MAY be `null` or absent if the `FilePart` is merely representing a file reference
  // without transmitting its content in the current message (e.g., referring to a previously uploaded file).
}

/**
 * File part in a message
 */
export interface FilePart extends PartBase {
  /**
   * Part type - file for FileParts
   */
  type: "file";

  /**
   * The file content - either URI or bytes
   */
  file: FileContent;
}

/**
 * Union type of all possible message parts
 */
export type Part = TextPart | DataPart | FilePart;

/**
 * Task artifact
 */
export interface TaskArtifact {
  /**
   * Unique identifier for the artifact
   */
  artifactId: string;

  /**
   * Mime type of the artifact
   */
  mimeType: string;

  /**
   * The URI where the artifact can be accessed
   */
  uri?: string;

  /**
   * Base64 encoded content of the artifact
   */
  bytes?: string;
  
  /**
   * Structured data content (for application/json mime type)
   */
  data?: Record<string, any>;
}

/**
 * Represents a tangible output generated by the agent during a task
 * Based on Section 6.7 of the A2A Protocol Specification
 */
export interface Artifact {
  /**
   * Descriptive name for the artifact
   */
  name?: string | null;

  /**
   * Human-readable description of the artifact
   */
  description?: string | null;

  /**
   * Content of the artifact, as one or more Part objects
   */
  parts: Part[];

  /**
   * Non-negative index for ordering artifacts or identifying chunks during streaming
   */
  index?: number;

  /**
   * In streaming, true means append parts to artifact at index; false (default) means replace
   */
  append?: boolean | null;

  /**
   * In streaming, true indicates this is the final update for the artifact at this index
   */
  lastChunk?: boolean | null;

  /**
   * Arbitrary key-value metadata associated with the artifact
   */
  metadata?: Record<string, any> | null;
}

/**
 * Represents the current state and associated context of a Task
 * Based on Section 6.2 of the A2A Protocol Specification
 */
export interface TaskStatus {
  /**
   * Current lifecycle state of the task
   */
  state: TaskState;

  /**
   * Optional message providing context for the current status
   */
  message?: Message | null;

  /**
   * Timestamp (UTC recommended) when this status was recorded
   */
  timestamp?: string | null;
}

/**
 * Represents a Task in the A2A protocol
 * Based on Section 6.1 of the A2A Protocol Specification
 */
export interface Task {
  /**
   * Unique identifier for the task (e.g., UUID), typically client-generated
   */
  id: string;

  /**
   * Optional client-generated ID to group related tasks into a session
   */
  sessionId?: string | null;

  /**
   * Current status of the task (state, message, timestamp)
   */
  status: TaskStatus;

  /**
   * Array of outputs generated by the agent for this task
   */
  artifacts?: Artifact[] | null;

  /**
   * Optional array of recent messages exchanged, if requested by historyLength
   */
  history?: Message[] | null;

  /**
   * Arbitrary key-value metadata associated with the task
   */
  metadata?: Record<string, any> | null;
}
